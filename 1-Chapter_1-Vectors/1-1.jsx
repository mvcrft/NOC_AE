/*    So, here we are using ExtendScript rather then fussing about in the AE interface using Expressions. There will be some things that just aren't possible in AE Expressions, and this format will let us replicate Nature of Code examples more natively. The basic functionality is fairly similar - setup the objects and values and then draw()! Our loop will be the current time of the After Effects composition incementing forward. As we move forward a frame, we will refresh the values of properties on any layers we like. Once we are at the end of the composition, the loop will end.This gives us the benefit of passing values from one moment in time to another which Expressions do not do. In the intro chapter we were able to get around this by accumulating values from 0 time. However, as soon as you add a conditional this becomes impossible, and even simple files like the bouncing ball require scripting. We'll lose some useful stuff that expressions give us (like the expression library and our beloved wiggle();) and gain some useful stuff that scripting gives us (like creating new any layers or new stuff we like, and interacting with the After Effects DOM).This creates a bit of a crisis of scope: It's important to try and not re-write all of Processing in a blank .jsx file. This isn't an issue for me because I don't even vaguley have the programming chops to attempt it! I'm learning as I go, so as I find out more about ExtendScript, I'll just leave my findings in the comments. My goal is to replicate the Nature of Code samples on a one to one basis as closely as possible as makes sense, and only create any needed functions or pieces I need for that example. There are a number of things that are going to translate one-to-one in After Effects (...and that's why we are doing this in the first place).Also, lucky for us, p5.js is in active development. (http://p5js.org) It's a javascript library that is essentially a new reinterpretation of Processing. Daniel Shiffman has ported his Nature of Code examples https://github.com/shiffman/The-Nature-of-Code-Examples-p5.js/ leveraging this new library, so we will liberally borrow concepts and code from there and p5.js when writing our ExtendScript versions.As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*///First, lets initialize some values. You can think of this as setup() if you like. I'm also going to go ahead and make a new composition in After Effects and create a new shape layer there, rather than creating a new comp and layer using scripting for the sake of keeping this file simple.var x = 100;var y = 100;var xSpeed = 15;var ySpeed = 15;//Next, let's set up a few lines that will replicate the draw() functionality.// let's target the first composition in our project.var myComp = app.project.item(1);//Then we get the duration of each frame in seconds of that compvar myFrameDuration = myComp.frameDuration;//Let's also get the Comp duration in frames, to know how many times to loop through.var totalFrames = myComp.duration * myComp.frameRate;//Now, let's put code to execute in our loop! If we've done our job right, this should be almost exactly the same as the Nature of Code examples.for (i = 0; i<=totalFrames;i++){        x += xSpeed;    y += ySpeed;        if ((x>myComp.width)|| (x < 0)){        xSpeed = xSpeed *-1;        };    if ((y>myComp.height)|| (y < 0)){        ySpeed = ySpeed *-1;        };            //And let's assign it to the position properties using setValueAtTime(), which will allow us to set values at specific times, values, and add keyframes!        myComp.layer(1).position.setValueAtTime(myFrameDuration*i,[x,y]);    };