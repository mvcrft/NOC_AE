/*    Let's keep adding to our vector library with magnitude. A quick note: Expressions calls this length(). Let's also try and replicate the rect() object as best we can.*/function createVector(x_,y_) {    this.x = x_;    this.y = y_;}//let's create the magnitude function.vMath = new function() {    this.add  = function(v1,v2){  v1.x += v2.x;  v1.y += v2.y;  };    this.sub  = function(v1,v2){  v1.x -= v2.x;  v1.y -= v2.y;  };    this.mult  = function(v1,n){   v1.x *= n;    v1.y *= n;  };    this.div  = function(v1,n){   v1.x /= n;    v1.y /= n;  };    this.mag  = function(v1){ return Math.sqrt((v1.x * v1.x) + (v1.y * v1.y))};}var myComp = app.project.item(5);var centerX = myComp.width/2;var centerY = myComp.height/2;function randomVal(max){return Math.abs(Math.random())*max;}var interval = 12;var myFrameDuration = myComp.frameDuration*interval;var totalFrames = (myComp.duration * myComp.frameRate)/interval;//Things get a little complicated making a rect() in After Effects. First, I created a new shape layer in AE. Then, I created a blank "Path" property from its contents. The procedural rectangle path doesn't seem to publish its four values, just a scale property (wierd?), so we need to build our own rectangle. It's not so hard, but this method is much more akin to beginShape() in processing. The path property also only receives an object data type which is called "Shape()" so let's make one of those.var rect = new Shape();//next, we need to switch the style to closed to enclose the shape. In the loop, we will set the values of the vertices and push the object to the path property of our shape layer.rect.closed = true; //here's the Nature of Code vector magnitude example.for (i = 0; i<=totalFrames;i++){        var center = new createVector(centerX,centerY);     var mouse = new createVector(randomVal(myComp.width),randomVal(myComp.height));        vMath.sub(mouse,center);        m = vMath.mag(mouse);        //here's where we will set the vertice values. It took me a second to realize it's counter-clockwise.    rect.vertices = [[0,0], [0,50], [m,50],[m,0]];         mouse.x += myComp.width/2;    mouse.y += myComp.height/2;        //Let's set keyframes on the Beam Effect and the Shape Layer- notice you have to push the object as the value to the path property, and it's pretty buried down for such a simple Shape layer. Shape layers resemble Processing in a lot of ways!     var beamEffect = myComp.layer(1).property("Effects").property("Beam");    beamEffect.property("Starting Point").setValueAtTime(myFrameDuration*i,[centerX,centerY])    beamEffect.property("Ending Point").setValueAtTime(myFrameDuration*i,[mouse.x,mouse.y]);    myComp.layer(2).property("Contents").property("Path").property("Path").setValueAtTime(myFrameDuration*i,rect);  };/*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/