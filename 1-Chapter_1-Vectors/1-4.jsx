/*    Let's keep adding to our vector library with multiply and divide. It will be a little hard to see the scaling effect since there is nothing visualizing the original value like the mouse cursor in the Nature of Code examples. Let's just add a null layer to show the vector value pre-multiplied.    */function createVector(x_,y_) {    this.x = x_;    this.y = y_;}//let's create the multiply function.vMath = new function() {    this.add  = function(v1,v2){  v1.x += v2.x;  v1.y += v2.y;  };    this.sub  = function(v1,v2){  v1.x -= v2.x;  v1.y -= v2.y;  };    this.mult  = function(v1,n){   v1.x *= n;    v1.y *= n;  };    this.div  = function(v1,n){   v1.x /= n;    v1.y /= n;  };}var myComp = app.project.item(4);var centerX = myComp.width/2;var centerY = myComp.height/2;function randomVal(max){return Math.abs(Math.random())*max;}var interval = 12;var myFrameDuration = myComp.frameDuration*interval;var totalFrames = (myComp.duration * myComp.frameRate)/interval;//here's the Nature of Code vector multiplication example.for (i = 0; i<=totalFrames;i++){        var center = new createVector(centerX,centerY);     var mouse = new createVector(randomVal(myComp.width),randomVal(myComp.height));        vMath.sub(mouse,center);        //let's save a copy of the vector for the Null's position.    var mouseOriginal = new createVector(mouse.x,mouse.y);        vMath.mult(mouse,.5);        //this is getting a bit messy. we should write a translate function.    mouse.x += myComp.width/2;    mouseOriginal.x += myComp.width/2;    mouse.y += myComp.height/2;    mouseOriginal.y += myComp.height/2;        //Let's set keyframes on the Beam Effect and the Null.    var beamEffect = myComp.layer(1).property("Effects").property("Beam");    beamEffect.property("Starting Point").setValueAtTime(myFrameDuration*i,[centerX,centerY])    beamEffect.property("Ending Point").setValueAtTime(myFrameDuration*i,[mouse.x,mouse.y]);    myComp.layer(2).position.setValueAtTime(myFrameDuration*i,[mouseOriginal.x,mouseOriginal.y]);    };/*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/