/* Let's make everything object oriented. I've started abstracting some of the functionality of earlier exercises, and see the need for more.    quick OOP prototype design pattern -first, make the object.var Thing = function(position){    this.position = 50;    this.scale = 10;    };Then, push to the object using the prototype keyword.Thing.prototype.doubler = function(){    this.position += this.position;    };Create a new container.var myThing;Create an object.myThing = new Thing(50);Call methods.myThing.doubler();      */var myComp = app.project.item(7);var myMover;function createVector(x_,y_) {    this.x = x_;    this.y = y_;}vMath = new function() {    this.add  = function(v1,v2){  v1.x += v2.x;  v1.y += v2.y;  };    this.sub  = function(v1,v2){  v1.x -= v2.x;  v1.y -= v2.y;  };    this.mult  = function(v1,n){   v1.x *= n;    v1.y *= n;  };    this.div  = function(v1,n){   v1.x /= n;    v1.y /= n;  };    this.mag  = function(v1){ return Math.sqrt((v1.x * v1.x) + (v1.y * v1.y))};    this.normalize = function(v1){        //first, get the magnitude        m = Math.sqrt((v1.x * v1.x) + (v1.y * v1.y));        //then, divide after checking for zero.        if (m != 0){             v1.x /= m;            v1.y /= m;            }        }    }r = new function(){this.randomVal = function(max){return Math.abs(Math.random())*max;};this.randomRange = function(min,max){return (Math.random()*max) + min;};}var Mover = function() {  this.position = new createVector((r.randomVal(myComp.width)), (r.randomVal(myComp.height)));  this.velocity = new createVector(r.randomRange(-2, 50), r.randomRange(-2, 50));};Mover.prototype.update = function() {    vMath.add(this.position,this.velocity);};        Mover.prototype.display = function(time) {    myComp.layer(1).position.setValueAtTime(time,[this.position.x,this.position.y]);};        Mover.prototype.checkEdges = function() {    if (this.position.x > myComp.width) {        this.position.x = 0;        }else if (this.position.x < 0) {            this.position.x = myComp.width;            };    if (this.position.y > myComp.height) {        this.position.y = 0;        }else if (this.position.y < 0) {            this.position.y = myComp.height;            };};myMover = new Mover();var myFrameDuration = myComp.frameDuration;var totalFrames = myComp.duration * myComp.frameRate;//setup()    myComp.layers.addShape();    myComp.layer(1).property("ADBE Root Vectors Group").addProperty("ADBE Vector Shape - Ellipse");    myComp.layer(1).property("ADBE Root Vectors Group").addProperty("ADBE Vector Graphic - Fill");    myComp.layer(1).property("ADBE Root Vectors Group").property("ADBE Vector Graphic - Fill").property("ADBE Vector Fill Color").setValue([1,1,1,1]);//draw()for (i = 0; i<=totalFrames;i++){    myMover.update();    myMover.checkEdges();    myMover.display((myFrameDuration*i));};    /*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/    