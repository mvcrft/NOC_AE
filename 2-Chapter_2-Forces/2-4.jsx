/*       Let's add friction.    */#include VectorLib.jsxr = new function(){this.randomVal = function(max){return Math.abs(Math.random())*max;};this.randomRange = function(min,max){return Math.random()*(max-min) + min;};}var comp = 4;var myComp = app.project.item(comp);var movers = [];var Mover = function(comp,layerNum,mass,x,y) {  this.comp = comp;  this.layerNum = layerNum;  this.mass = mass;  this.position = createVector(x,y);  this.velocity = createVector(0,0);  this.acceleration = createVector(0,0);};Mover.prototype.applyForce = function(force){    var f = Vector.div(force,this.mass);    this.acceleration.add(f);    }Mover.prototype.update = function(time) {    this.velocity.add(this.acceleration);    this.position.add(this.velocity);    this.acceleration.mult(0);};      Mover.prototype.display = function( time ) {    app.project.item(this.comp).layer(this.layerNum).position.setValueAtTime(time,[this.position.x,this.position.y]);    };        Mover.prototype.checkEdges = function() {    var comp = app.project.item(this.comp);    if (this.position.x > comp.width) {        this.position.x = comp.width;        this.velocity.x *= -1;        }else if (this.position.x < 0) {            this.velocity.x *= -1;            this.position.x = 0;            };    if (this.position.y > comp.height) {        this.velocity.y *= -1;        this.position.y = comp.height;        };};Mover.prototype.show = function(){    var layerShapeContents = app.project.item(this.comp).layer(this.layerNum).property("ADBE Root Vectors Group");    layerShapeContents.addProperty("ADBE Vector Shape - Ellipse");    layerShapeContents.property("ADBE Vector Shape - Ellipse").property("ADBE Vector Ellipse Size").setValue([this.mass * 16,this.mass * 16]);    layerShapeContents.addProperty("ADBE Vector Graphic - Fill");    layerShapeContents.property("ADBE Vector Graphic - Fill").property("ADBE Vector Fill Color").setValue([1,1,1,1]);    layerShapeContents.property("ADBE Vector Graphic - Fill").property("ADBE Vector Fill Opacity").setValue(r.randomRange(30,90));    }var myFrameDuration = myComp.frameDuration;var totalFrames = myComp.duration * myComp.frameRate;var moverTotal = 10;//setup()//We will need 3 loops now, one to make the layers in After Effects, and push a mover to the array associated with each new layer. for (i = 0;i<=moverTotal;i++){     myComp.layers.addShape();    var mass = r.randomRange(1,20);    m = new Mover(comp,i+1,mass,0,0)    movers.push(m);    };//The next loop will assign the show properties to each mover and layer.for (i = 0;i<=moverTotal;i++){    movers[i].show();    }//draw()//Now we will loop through time and loop through the layers, create some new forces, apply them, and assign the display values.for (i = 0; i<=totalFrames;i++){        var time = myFrameDuration*i;        for (var j = 0;j < myComp.layers.length; j++){                // here's the coefficient of friction. AKA How friction-y?         var c = .5;                //this is the direction of friction. For now, it's a simple scalar value.         var normal = 1;              //multiplying them in this case results in the same value, but this should change in future examples.        var frictionMag = c*normal;                //now we need to get the velocity out of each mover. This should return a new Vector object.        var friction = movers[j].velocity.get();                //this gives us the opposite direction of velocity.        friction.mult(-1);        //gives us the unit vector        friction.normalize();        //multiply with new magnitude        friction.mult(frictionMag);                var wind = createVector(.5,0);                var m = movers[j].mass;                var gravity = createVector(0,2*m);                movers[j].applyForce(friction);        movers[j].applyForce(wind);        movers[j].applyForce(gravity);        movers[j].update(time);        movers[j].checkEdges();        movers[j].display(time);        }};    /*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/    