/*        So I've got some major changes going on here. Essentially, I've decided that each Mover should know which comp and layer it belongs to in After Effects, so all of the styling properties can be held within the object and assigned as opposed to a list of properties. This change was instituted to make the whole set up more object oriented, but also the realization that Mass and Ellipse size are going to be related, so they all have to be held within the Mover itself. I'm still having internal debates about what values should be held where. For example, we could get the layer numbers and length from After Effects, or create our own array and track values in ExtendScript.        */#include VectorLib.jsx//Thinking of taking these random functions and folding them into the library.r = new function(){this.randomVal = function(max){return Math.abs(Math.random())*max;};this.randomRange = function(min,max){return Math.random()*(max-min) + min;};}// Let's make one comp variable controlling everything now, this is better.var comp = 2;var myComp = app.project.item(comp);var movers = [];//We're passing more arguments into Mover. The comp, layer number, mass, and position.var Mover = function(comp,layerNum,mass,x,y) {  this.comp = comp;  this.layerNum = layerNum;  this.mass = mass;  this.position = createVector(x,y);  this.velocity = createVector(0,0);  this.acceleration = createVector(0,0);};//Here's Newton's second law F=A*M, verbatim from Nature of Code. Mover.prototype.applyForce = function(force){    var f = Vector.div(force,this.mass);    this.acceleration.add(f);    }Mover.prototype.update = function(time) {    this.velocity.add(this.acceleration);    this.position.add(this.velocity);    this.acceleration.mult(0);};      Mover.prototype.display = function( time ) {    app.project.item(this.comp).layer(this.layerNum).position.setValueAtTime(time,[this.position.x,this.position.y]);    };        Mover.prototype.checkEdges = function() {    var comp = app.project.item(this.comp);    if (this.position.x > comp.width) {        this.position.x = comp.width;        this.velocity.x *= -1;        }else if (this.position.x < 0) {            this.velocity.x *= -1;            this.position.x = 0;            };    if (this.position.y > comp.height) {        this.velocity.y *= -1;        this.position.y = comp.height;        };};//Show is for setting visual properties of the layers, so we'll push our shape layer contents here. Since it's now object oriented, it can assign values to the correct layer based on the "this" keyword.Mover.prototype.show = function(){    var layerShapeContents = app.project.item(this.comp).layer(this.layerNum).property("ADBE Root Vectors Group");    layerShapeContents.addProperty("ADBE Vector Shape - Ellipse");    layerShapeContents.property("ADBE Vector Shape - Ellipse").property("ADBE Vector Ellipse Size").setValue([this.mass * 16,this.mass * 16]);    layerShapeContents.addProperty("ADBE Vector Graphic - Fill");    layerShapeContents.property("ADBE Vector Graphic - Fill").property("ADBE Vector Fill Color").setValue([1,1,1,1]);    layerShapeContents.property("ADBE Vector Graphic - Fill").property("ADBE Vector Fill Opacity").setValue(r.randomRange(30,90));    }var myFrameDuration = myComp.frameDuration;var totalFrames = myComp.duration * myComp.frameRate;var moverTotal = 10;//setup()//We will need 3 loops now, one to make the layers in After Effects, and push a mover to the array associated with each new layer. for (i = 0;i<=moverTotal;i++){     myComp.layers.addShape();    var mass = r.randomRange(1,20);    m = new Mover(comp,i+1,mass,0,0)    movers.push(m);    };//The next loop will assign the show properties to each mover and layer.for (i = 0;i<=moverTotal;i++){    movers[i].show();    }//draw()//Now we will loop through time and then loop through the layers, create some new forces, apply them, and assign the display values.for (i = 0; i<=totalFrames;i++){        var time = myFrameDuration*i;        for (var j = 0;j < myComp.layers.length; j++){        var wind = createVector(.1,0);        var gravity = createVector(0,2);        movers[j].applyForce(wind);        movers[j].applyForce(gravity);        movers[j].update(time);        movers[j].checkEdges();        movers[j].display(time);        }};    /*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/    