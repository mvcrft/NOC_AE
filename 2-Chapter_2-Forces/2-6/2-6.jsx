// Here's the Attractor Example. We will keep all of the classes in this document, then in the next example, we will break them out.#include VectorLib.jsxvar Mover = function(comp,layerNum,mass,x,y) {  this.comp = comp;  this.layerNum = layerNum;  this.mass = mass;  this.position = createVector(x,y);  this.velocity = createVector(0,0);  this.acceleration = createVector(0,0);};Mover.prototype.applyForce = function(force){    var f = Vector.div(force,this.mass);    this.acceleration.add(f);    };Mover.prototype.update = function() {    this.velocity.add(this.acceleration);    this.position.add(this.velocity);    this.acceleration.mult(0);};      Mover.prototype.display = function( time ) {    app.project.item(this.comp).layer(this.layerNum).position.setValueAtTime(time,[this.position.x,this.position.y]);    };//This seemed to be causing an undefined object error. I'm not quite sure why. Shiffman doesn't call it in this example anyway./*Mover.prototype.checkEdges = function() {    var comp = app.project.item(this.comp);    if (this.position.x > comp.width) {        this.position.x = comp.width;        this.velocity.x *= -1;        }else if (this.position.x < 0)             this.velocity.x *= -1;            this.position.x = 0;            };            if (this.position.y > comp.height) {        this.velocity.y *= -1;        this.position.y = comp.height;       };          */Mover.prototype.show = function(){    var layerShapeContents = app.project.item(this.comp).layer(this.layerNum).property("ADBE Root Vectors Group");        var size = 32;        //Let's assign the visual properties to the shape layer    layerShapeContents.addProperty("ADBE Vector Shape - Ellipse");    layerShapeContents.property("ADBE Vector Shape - Ellipse").property("ADBE Vector Ellipse Size").setValue([this.mass * size,this.mass * size]);    layerShapeContents.addProperty("ADBE Vector Graphic - Fill");    layerShapeContents.property("ADBE Vector Graphic - Fill").property("ADBE Vector Fill Color").setValue([.25,.25,.25,1]);     layerShapeContents.property("ADBE Vector Graphic - Fill").property("ADBE Vector Fill Opacity").setValue(r.randomRange(30,90));        //Since we have multiple layers, let's name it "Mover" too.    app.project.item(this.comp).layer(this.layerNum).name = "Mover";       };// Let's create the attractor "class". First things first, I'm going to eliminate the user interactions for After Effects.var Attractor = function(comp,layerNum, posX, posY){this.comp = comp;this.layerNum = layerNum;this.position = createVector(posX,posY);this.mass = 20;this.G = 1;this.dragOfset = createVector(0,0);}//Here's where the attraction force is calculated. We need to pass a mover to an attractor, that's "m"Attractor.prototype.calculateAttraction = function(m){//subtract one position from the othervar force = Vector.sub(this.position, m.position);//get the lengthvar distance = force.mag();//we're going to need to build a constrain function. I've included it in VectorLib. Maybe Vectorlib needs a new name. Feel free to dial these values up and down.distance = constrain(distance, 5, 45);//normalize the vectorforce.normalize();//here's the gravitational force magnitude. this returns a scalar.var strength = (this.G*this.mass*this.mass) / (distance*distance);//get force vector and multiply!force.mult(strength);return force;}//I've decided that the Attractor will just move around in a circle and forgo the interactivity in the example, although we could build something like the motion sketch example in chapter 1.Attractor.prototype.update = function(time){    this.position.x += Math.sin(time)*15;    this.position.y += Math.cos(time)*15;        }Attractor.prototype.display = function( time ) {    app.project.item(this.comp).layer(this.layerNum).position.setValueAtTime(time,[this.position.x,this.position.y]);};Attractor.prototype.show = function(){    var layerShapeContents = app.project.item(this.comp).layer(this.layerNum).property("ADBE Root Vectors Group");    var size = 128;    //Let's assign the visual properties to the shape layer    layerShapeContents.addProperty("ADBE Vector Shape - Ellipse");    layerShapeContents.property("ADBE Vector Shape - Ellipse").property("ADBE Vector Ellipse Size").setValue([size,size]);    layerShapeContents.addProperty("ADBE Vector Graphic - Fill");    layerShapeContents.property("ADBE Vector Graphic - Fill").property("ADBE Vector Fill Color").setValue([.8,.8,.8,1]);    app.project.item(this.comp).layer(this.layerNum).name = "Attractor";    }//Let's initialize the values.var comp = 6;var myComp = app.project.item(comp);var myFrameDuration = myComp.frameDuration;var totalFrames = myComp.duration * myComp.frameRate;var mover = new Mover(comp,1,2,50,50);var attractor = new Attractor(comp,2,myComp.width/4,myComp.height/3);//This is not exactly elegant, but right now we're just matching the number of objects called with an equal number of layers using addShape(), then styling them using show()myComp.layers.addShape();myComp.layers.addShape();mover.show();attractor.show();for (i = 0; i<=totalFrames;i++){        var time = myFrameDuration*i;    //here's where we call the attractor's calculate attraction.    var force = attractor.calculateAttraction(mover);    mover.applyForce(force);        mover.update();        attractor.update(time);        mover.display(time);    attractor.display(time);};