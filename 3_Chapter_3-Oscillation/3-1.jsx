/*Let's dive into the wonderful world of rotation, angles, and Trig. While Nature of Code has been a great practical refresher, a really thorough and equally useful review of the unit circle, SOH-CAH-TOA, Pythagorean Theorem and all the rest of it can be found at the excellent Kahn Academy. https://www.khanacademy.org/math/trigonometry        First things first, let's set up a simple example of Angular Motion. */#include VectorLib.jsxvar comp = 1;var angle = 0;var aVelocity = 0;var aAcceleration = .r1;var myComp = app.project.item(comp);var myFrameDuration = myComp.frameDuration;var totalFrames = myComp.duration * myComp.frameRate;//Let's build the baton shape thing.myComp.layers.addShape();var layerShapeContents = app.project.item(comp).layer(1).property("ADBE Root Vectors Group");layerShapeContents.addProperty("ADBE Vector Shape - Group");var line = new Shape();line.vertices = [[-200,0], [200,0]];layerShapeContents.property("ADBE Vector Shape - Group").property("ADBE Vector Shape").setValue(line);layerShapeContents.addProperty("ADBE Vector Shape - Ellipse");app.project.item(comp).layer(1).property("Contents").property(2).property("Position").setValue([-200,0]);layerShapeContents.addProperty("ADBE Vector Shape - Ellipse");app.project.item(comp).layer(1).property("Contents").property(3).property("Position").setValue([200,0]);layerShapeContents.addProperty("ADBE Vector Graphic - Stroke");//lucky for us, shape layers already transform values, so all we have to do is rotate the layer.for (i = 0; i<=totalFrames;i++){            var time = myFrameDuration*i;    angle += aVelocity;    aVelocity += aAcceleration;    app.project.item(comp).layer(1).rotation.setValueAtTime(time,angle);};/*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/