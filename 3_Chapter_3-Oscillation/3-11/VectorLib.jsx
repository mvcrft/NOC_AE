function Vector(x_,y_) {    this.x = x_;    this.y = y_;}function createVector(x_,y_){    return new Vector(x_,y_);}//Here's the prototype functionsVector.prototype.add = function(v){    this.x += v.x;    this.y += v.y;    };Vector.prototype.sub = function(v){    this.x -= v.x;    this.y -= v.y;    };Vector.prototype.mult = function(n){    this.x *= n;    this.y *= n;    };Vector.prototype.div = function(n){    this.x /= n;    this.y /= n;};Vector.prototype.magSq = function(){    return (this.x*this.x)+(this.y*this.y);    }Vector.prototype.mag = function(){    return Math.sqrt(this.magSq());    }Vector.prototype.setMag = function(n){    this.normalize();    this.mult(n);    }Vector.prototype.normalize = function(){    var mag = this.mag();    if (mag != 0){        this.x /= mag;        this.y /= mag;        }    };Vector.prototype.limit = function(max){    var mSq = this.magSq();    if (mSq > max*max){        this.div(Math.sqrt(mSq));        this.mult(max);        }};Vector.prototype.heading = function () {      return (Math.atan2(this.y, this.x) * 360) /2 /Math.PI;};//getters and setters are handy!Vector.prototype.set = function(x,y){    this.x = x;    this.y = y;    return this;    };Vector.prototype.get = function(){   return new Vector(this.x,this.y);    };//Here's the static functions.Vector.add = function(v1,v2){    v = v1.get();    v.add(v2);    return v    };Vector.sub = function(v1,v2){    v = v1.get();    v.sub(v2);    return v    };Vector.mult = function(v1,n){    v = v1.get();    v.mult(n);    return v    };Vector.div = function(v1,n){    v = v1.get();    v.div(n);    return v    };//Let's put some of the useful Math functions here. We'll borrow them from p5.r = new function(){this.randomVal = function(max){return Math.abs(Math.random())*max;};this.randomRange = function(min,max){return Math.random()*(max-min) + min;};}var map = function (n, start1, stop1, start2, stop2) {      return (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;};var constrain = function(number, min, max){    if (number >= max){        number = max;        }else if (number <= min){            number = min;            };        return number;    };var lerp = function (start, stop, amt) {      return amt * (stop - start) + start;      };    /*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/