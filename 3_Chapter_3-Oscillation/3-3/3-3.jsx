/*We've updated VectorLib to include the atan2 function. Let's make a heading function!Vector.prototype.heading = function () {      return (Math.atan2(this.y, this.x) * 360) /2 /Math.PI;};//This returns a scalar value in degrees useful for the rotation property. Notice we had to convert Radians to Degrees using the inverse of the formula shown in Nature of Code. Also a bit confusing- atan2() takes y first, then x. (Tangent = Opposite / Adjacent).*/#include VectorLib.jsx#include mover.jsx//Let's initialize the values.var comp = 3;var myComp = app.project.item(comp);var mover = new Mover(comp,2,myComp.width/2,myComp.height/2);var myFrameDuration = myComp.frameDuration;var totalFrames = myComp.duration * myComp.frameRate;//Let's add to shape layers and style the mover.myComp.layers.addShape();myComp.layers.addShape();mover.show();//We will draw a quick circle for layer 1 and assign it to a circle path to visualize the "mouse" pointer in the example. Check out the mover class.var layerShapeContents = app.project.item(comp).layer(1).property("ADBE Root Vectors Group");layerShapeContents.addProperty("ADBE Vector Shape - Ellipse");layerShapeContents.property(1).property("Size").setValue([5,5]);layerShapeContents.addProperty("ADBE Vector Graphic - Fill");layerShapeContents.property("ADBE Vector Graphic - Fill").property("ADBE Vector Fill Color").setValue([1,1,1,1]);for (i=0;i<=totalFrames;i++){            var time = myFrameDuration*i;    mover.update(time);    mover.display(time);        // Let's just match the circle drawn in mover.    myComp.layer(1).position.setValueAtTime(time,[myComp.width/2 + Math.sin(time)*50, myComp.height/2 + Math.cos(time)*50]);            };/*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/