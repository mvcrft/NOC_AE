/*Ok, let's do some Polar to Cartesian co-ordinates conversions. This will be a bit more manual then applying sin(time) and rotating, but's it's the same principle. We're creating a unit circle and then just scaling out.     to convert from polar coordinates (r for radius, and theta for angle) to cartesian (x,y):    x = r * cos(theta)    y = r * sin(theta)*///Let's initialize the values.var r;var theta;var comp = 4;var myComp = app.project.item(comp);var myFrameDuration = myComp.frameDuration;var totalFrames = myComp.duration * myComp.frameRate;//Let's add to shape layers and style the mover.r = myComp.height*.45;theta = 0;//Draw the circle and the line. We will manipulate the shape layer values in the loop.myComp.layers.addShape();var layerShapeContents = app.project.item(comp).layer(1).property("ADBE Root Vectors Group");layerShapeContents.addProperty("ADBE Vector Shape - Ellipse");layerShapeContents.property("ADBE Vector Shape - Ellipse").property("Size").setValue([250,250]);layerShapeContents.addProperty("ADBE Vector Shape - Group");layerShapeContents.addProperty("ADBE Vector Graphic - Stroke");for (i=0;i<=totalFrames;i++){        var time = myFrameDuration*i;        var x = r * Math.cos(theta);    var y = r * Math.sin(theta);        var line = new Shape();    line.vertices = [[0,0], [x,y]];    layerShapeContents.property("ADBE Vector Shape - Group").property("ADBE Vector Shape").setValueAtTime(time, line);    layerShapeContents.property("ADBE Vector Shape - Ellipse").property("Position").setValueAtTime(time,[x,y]);        theta += .1;        };/*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/