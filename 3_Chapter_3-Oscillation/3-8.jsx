/*     let's draw the static wave. We won't even really need to loop through time for this particular example.    */#include vectorLib.jsx//General initvar comp = 8;var myComp = app.project.item(comp);//let's init our angle and periodvar angle = 0;var angleVelocity = .1;// this will be a handy control for incrementsvar samples = 128;//lets add a shape layermyComp.layers.addShape();//let's create a new array to hold our points for the wavewavePoints = [];//and we'll stretch our samples to the comp widthincrement = myComp.width / samples;//our for() loop is going to create a bezier point for every sample along the sin wave, push it to the array, and then increment angle. This whole operation is really similar to drawShape() in p5/processingfor (i=0;i<=samples;i++){   y = map(Math.sin(angle),-1,1,0,myComp.height);   x = i*increment;   wavePoints.push([x,y]);   angle += angleVelocity;   }// let's create a new shape object to hold all this data.var wave = new Shape();//make sure it's an open shapewave.closed = false;//and assign the array to the vertices of the shapewave.vertices = wavePoints;//ok, lets add a line, style it, and push the shape to 0,0layerShapeContents = myComp.layer(1).property("ADBE Root Vectors Group");layerShapeContents.addProperty("ADBE Vector Shape - Group");myComp.layer(1).position.setValue([0,0]);myComp.layer(1).property("Contents").property(1).property("Path").setValue(wave);layerShapeContents.addProperty("ADBE Vector Graphic - Stroke");/*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/