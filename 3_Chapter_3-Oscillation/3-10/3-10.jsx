/* We will just duplicate Shiffman's comments here because they are so helpful. We'll have to excise the user interactivity for our example.// Pendulum// A simple pendulum simulation// Given a pendulum with an angle theta (0 being the pendulum at rest) and a radius r// we can use sine to calculate the angular component of the gravitational force.// Gravity Force = Mass * Gravitational Constant;// Pendulum Force = Gravity Force * sine(theta)// Angular Acceleration = Pendulum Force / Mass = gravitational acceleration * sine(theta);// Note this is an ideal world scenario with no tension in the // pendulum arm, a more realistic formula might be:// Angular Acceleration = (g / R) * sine(theta)// For a more substantial explanation, visit:// http://www.myphysicslab.com/pendulum1.html */#include VectorLib.jsx#include Pendulum.jsx//General initvar comp = 10;var myComp = app.project.item(comp);var myFrameDuration = myComp.frameDuration;var totalFrames = myComp.duration * myComp.frameRate;var pendulum;var myPosition = createVector(myComp.width/2,myComp.height/2);var r = 350; //this is how long the arm connecting the pendulum is//Let's create a new Pendulum object and place it at the center of the screen.pendulum = new Pendulum(comp, 1, myPosition, r);//And let's let the pendulum create layers and draw itself onscreenpendulum.display();pendulum.show();//And update the values.for (i=0;i<=totalFrames;i++){    var time = myFrameDuration*i;    pendulum.go();    pendulum.setValueAtTime(time);    };/*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/