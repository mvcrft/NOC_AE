//Here's a simple Pendulum class. We're modifying everything a bit using the same patterns as before to work with After Effects.#include VectorLib.jsxvar Pendulum = function Pendulum(comp, layer, origin, r) {    this.comp = comp;    this.layer = layer;    this.origin = origin;    this.position = createVector(0,0);    this.r = r;  //this is the length of the arm    this.angle = Math.PI/4; // this is 45 degrees but we will keep it in radians.    this.aVelocity = 0.0;    this.aAcceleration = 0.0;    this.damping = 0.995;   // Arbitrary damping    this.ballr = 96.0;      // Arbitrary ball radius  };//This is just a convenience function that wraps both update functions up and is implicit about the order.Pendulum.prototype.go = function() {  this.update();  this.display();}// Function to update positionPendulum.prototype.update = function() {/*The basic gist of this is figuring out where the pendulum is in relation to the origin, and then returning a value based on that angle. Think of this like calculating the forces in the previous examples.*/        var gravity = 0.8;                                               // Arbitrary constant - feel free to crank this up and down!    this.aAcceleration = (-1 * gravity / this.r) * Math.sin(this.angle);  // Remember, the length of the Arm will effect the acceleration (see: http://www.myphysicslab.com/pendulum1.html)        //Standard angular motion algorithm    this.aVelocity += this.aAcceleration;                            // Increment velocity    this.aVelocity *= this.damping;                                  // Arbitrary damping    this.angle += this.aVelocity;                                    // Increment angle};//This is simply updating the position of the pendulum- it will need to do a polar to cartesian conversion and add it to the origin.Pendulum.prototype.display = function() {      this.position.set(this.r*Math.sin(this.angle), this.r*Math.cos(this.angle)); // Polar to cartesian conversion  //this.position.add(this.origin);    // Make sure the position is relative to the pendulum's origin - Actually, it already is relative because we are using AE shape layers.  };//We've had to change the name of the display function here because we already have one in the example, but this function is more like the "display" of other examples. We will have to simply update the value of position for the pendulum shape, but redraw the line every frame. This is accomplished by creating a new shape() object (not a new shape layer! This could be confusing) and updating the vertices property, then setting the value to the object. One reason for including this is that it works very much like drawShape() in processing/p5. This could also be accomplished by drawing the line once and simply rotating it.Pendulum.prototype.setValueAtTime = function(time) {        var layerShapeContents = app.project.item(this.comp).layer(this.layer).property("ADBE Root Vectors Group");    var line = new Shape();    line.vertices = [[0,0], [this.position.x,this.position.y]];  //We're zeroing out the origin value becuase shape layers are already relative.    layerShapeContents.property("ADBE Vector Shape - Group").property("ADBE Vector Shape").setValueAtTime(time, line);     layerShapeContents.property("ADBE Vector Shape - Ellipse").property("Position").setValueAtTime(time,[this.position.x,this.position.y]);    };//need the initial drawing of the pendulum here.Pendulum.prototype.show = function() {    //Let's draw some shapes onscreen for display and style them.    myComp.layers.addShape();    var layerShapeContents = app.project.item(this.comp).layer(this.layer).property("ADBE Root Vectors Group");    layerShapeContents.addProperty("ADBE Vector Shape - Ellipse");    layerShapeContents.property("ADBE Vector Shape - Ellipse").property("Size").setValue([this.ballr,this.ballr]);    layerShapeContents.property("ADBE Vector Shape - Ellipse").property("Position").setValue([this.position.x,this.position.y]);    layerShapeContents.addProperty("ADBE Vector Shape - Group");    layerShapeContents.addProperty("ADBE Vector Graphic - Stroke");    var line = new Shape();    line.vertices = [[0,0], [this.position.x,this.position.y]]; //We're zeroing out the origin value because shape layers are already relative.    layerShapeContents.property("ADBE Vector Shape - Group").property("ADBE Vector Shape").setValue(line);    };/*As always, refer to The Nature of Code byDaniel Shiffmanhttp://natureofcode.comfor original examples!*/